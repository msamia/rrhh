@startuml
title SAGA – Procesamiento Interno de Fallback (con Aspecto)
autonumber

participant "StateMachine<Estados,Eventos>" as SM
participant "SagaStateMachineConfig"      as Config
participant "SagaResilienceAspect"        as Aspect
participant "EmpleadoSagaActions"         as EmpleadoActions
participant "ContratoSagaActions"         as ContratoActions
participant "EntrenamientoSagaActions"    as EntrenamientoActions
participant "NominaSagaActions"           as NominaActions
participant "CompensacionSagaActions"     as CompensacionActions

' 1) Llega el evento de fallback, p.ej. FALLBACK_EMPLEADO
SM -> SM : recibe evento FALLBACK_EMPLEADO\n(payload: empleadoDto)
activate SM

' 2) El motor de estados busca la transición para FALLBACK_EMPLEADO
SM -> Config : findTransition(source=EMPLEADO_CREADO,\n event=FALLBACK_EMPLEADO)
activate Config
Config --> SM : transición -> ESTADO_FALLIDO\n(action = handleEmpleadoFallback)
deactivate Config

' 3) Se ejecuta handleEmpleadoFallback() –> interceptado por el aspecto
SM -> Aspect : intercept(handleEmpleadoFallback)
activate Aspect

'--- Dentro de handleEmpleadoFallback se invocan varias acciones con @SagaStep ---

Aspect -> EmpleadoActions : handleEmpleadoFallback(context)
activate EmpleadoActions

' 3.1) EmpleadoActions llama a compensar en orden: Contrato, Nómina, Empleado
EmpleadoActions -> CompensacionActions : compensarEmpleado(empleadoDto)
activate CompensacionActions

' 3.1.1) Revertir contrato (interceptado)
CompensacionActions -> SM : sendEvent(REVERTIR_CONTRATO)
activate SM
SM -> Aspect : intercept(doRevertirContrato)
activate Aspect

Aspect -> ContratoActions : doRevertirContrato(context)
activate ContratoActions
ContratoActions --> Aspect : Contrato revertido
deactivate ContratoActions
Aspect --> SM : return
deactivate Aspect
SM -> CompensacionActions : (ack)
deactivate SM

' 3.1.2) Revertir nómina (interceptado)
CompensacionActions -> SM : sendEvent(REVERTIR_NOMINA)
activate SM
SM -> Aspect : intercept(doRevertirNomina)
activate Aspect

Aspect -> NominaActions : doRevertirNomina(context)
activate NominaActions
NominaActions --> Aspect : Nómina revertida
deactivate NominaActions
Aspect --> SM : return
deactivate Aspect
SM -> CompensacionActions : (ack)
deactivate SM

' 3.1.3) Revertir empleado (interceptado)
CompensacionActions -> SM : sendEvent(REVERTIR_ALTA)
activate SM
SM -> Aspect : intercept(doRevertirEmpleado)
activate Aspect

Aspect -> EmpleadoActions : doRevertirEmpleado(context)
activate EmpleadoActions
EmpleadoActions --> Aspect : Alta revertida
deactivate EmpleadoActions
Aspect --> SM : return
deactivate Aspect
SM -> CompensacionActions : (ack)
deactivate SM

' 3.2) CompensacionActions notifica a EmpleadoActions que terminó
CompensacionActions --> EmpleadoActions : ack compensaciones
deactivate CompensacionActions

' 3.3) EmpleadoActions retorna al aspecto
EmpleadoActions --> Aspect : success
deactivate EmpleadoActions

' 3.4) Aspect notifica a StateMachine que finalizó fallback
Aspect --> SM : sendEvent(Mono.just(ERROR))
deactivate Aspect

' 4) StateMachine recibe ERROR y transita a ESTADO_FALLIDO
SM -> SM : transición interna\na ESTADO_FALLIDO
deactivate SM

' 5) Fin de la SAGA en FALLIDO

@enduml

