@startuml
title Fallback – Servicio Nómina
autonumber

actor Cliente
participant "API Gateway"    as Gateway
participant "SagaController"  as Controller
participant "StateMachine"    as SM
participant "NominaSagaActions" as NominaActions
participant "NominaClient"    as NominaClient
participant "NominaClientFallback" as NominaFallback
participant "DomainEventPublisher" as Publisher

'--- 1) Cliente invoca operación de procesar/revertir nómina ---
Cliente -> Gateway : POST /api/saga/nominas\n{liquidacionDto}
Gateway -> Controller : generatePayroll(liquidacionDto)

'--- 2) Controller arranca la saga ---
Controller -> SM : startReactively()
activate SM
SM -> Controller : Mono<Void> (ack)

Controller -> SM : sendEvent(Mono.just(PROCESAR_NOMINA))
activate SM

'--- 3) StateMachine ejecuta la acción doProcesarNomina() ---
SM -> NominaActions : doProcesarNomina(context)
activate NominaActions

'--- 4) NominaActions llama al microservicio-Nómina (simulación de fallo) ---
NominaActions -> NominaClient : procesarNomina(liquidacionDto)
NominaClient --> NominaActions : (exception o timeout)

'--- 5) Debido al error o circuit breaker, se dispara el fallback ---
NominaActions -> NominaFallback : fallbackProcesarNomina(liquidacionDto)
activate NominaFallback

'--- 6) El fallback publica un evento en Kafka indicando fallo ---
NominaFallback -> Publisher : publish("servicio-nomina.fallback.process", liquidacionDto)
activate Publisher
Publisher --> NominaFallback : ack

'--- 7) El fallback notifica error al StateMachine ---
NominaFallback -> SM : sendEvent(Mono.just(ERROR))
deactivate NominaFallback
deactivate Publisher

'--- 8) StateMachine recibe ERROR y transita a FALLIDO ---
SM -> SM : transición a estado FALLIDO\n(onErrorAction)

deactivate NominaActions
deactivate SM

'--- 9) Controller devuelve error al cliente ---
Controller --> Gateway : HTTP 500 Internal Server Error
Gateway --> Cliente   : {error: "Circuit breaker abierto"}


@enduml
