@startuml
title Fallback – Servicio Contrato
autonumber

actor Cliente
participant "API Gateway"    as Gateway
participant "SagaController"  as Controller
participant "StateMachine"    as SM
participant "ContratoSagaActions" as ContratoActions
participant "ContratoClient"  as ContratoClient
participant "ContratoClientFallback" as ContratoFallback
participant "DomainEventPublisher" as Publisher

'--- 1) Cliente invoca operación de creación/actualización de contrato ---
Cliente -> Gateway : POST /api/saga/contratos\n{contratoDto}
Gateway -> Controller : createOrUpdateContract(contratoDto)

'--- 2) Controller arranca la saga ---
Controller -> SM : startReactively()
activate SM
SM -> Controller : Mono<Void> (ack)

Controller -> SM : sendEvent(Mono.just(CREATE_CONTRATO))
activate SM

'--- 3) StateMachine ejecuta la acción doCreateContrato() ---
SM -> ContratoActions : doCreateContrato(context)
activate ContratoActions

'--- 4) ContratoActions llama al microservicio-Contrato (simulación de fallo) ---
ContratoActions -> ContratoClient : createContrato(contratoDto)
ContratoClient --> ContratoActions : (exception o timeout)

'--- 5) Debido al error o circuit breaker, se dispara el fallback ---
ContratoActions -> ContratoFallback : fallbackCreateContract(contratoDto)
activate ContratoFallback

'--- 6) El fallback publica un evento en Kafka indicando fallo ---
ContratoFallback -> Publisher : publish("servicio-contrato.fallback.create", contratoDto)
activate Publisher
Publisher --> ContratoFallback : ack

'--- 7) El fallback notifica error al StateMachine ---
ContratoFallback -> SM : sendEvent(Mono.just(ERROR))
deactivate ContratoFallback
deactivate Publisher

'--- 8) StateMachine recibe ERROR y transita a FALLIDO ---
SM -> SM : transición a estado FALLIDO\n(onErrorAction)

deactivate ContratoActions
deactivate SM

'--- 9) Controller devuelve error al cliente ---
Controller --> Gateway : HTTP 500 Internal Server Error
Gateway --> Cliente   : {error: "Circuit breaker abierto"}


@enduml
