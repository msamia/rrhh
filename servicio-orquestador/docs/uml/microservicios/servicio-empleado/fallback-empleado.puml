@startuml
title Fallback – Servicio Empleado
autonumber

actor Cliente
participant "API Gateway"    as Gateway
participant "SagaController"  as Controller
participant "StateMachine"    as SM
participant "EmpleadoSagaActions" as EmpleadoActions
participant "EmpleadoClient"  as EmpleadoClient
participant "EmpleadoClientFallback" as EmpleadoFallback
participant "DomainEventPublisher" as Publisher

'--- 1) Cliente invoca la operación de alta de empleado ---
Cliente -> Gateway : POST /api/saga/empleados\n{empleadoDto}
Gateway -> Controller : createEmployee(empleadoDto)

'--- 2) Controller arranca la saga ---
Controller -> SM : startReactively()
activate SM
SM -> Controller : Mono<Void> (ack)

Controller -> SM : sendEvent(Mono.just(CREATE_EMPLOYEE))
activate SM

'--- 3) StateMachine ejecuta la acción doCreateEmployee() ---
SM -> EmpleadoActions : doCreateEmployee(context)
activate EmpleadoActions

'--- 4) EmpleadoActions llama al microservicio-Empleado (simulación de fallo) ---
EmpleadoActions -> EmpleadoClient : createEmployee(empleadoDto)
EmpleadoClient --> EmpleadoActions : (exception o timeout)

'--- 5) Debido al error o circuit breaker, se dispara el fallback ---
EmpleadoActions -> EmpleadoFallback : fallbackCreateEmployee(empleadoDto)
activate EmpleadoFallback

'--- 6) El fallback publica un evento en Kafka indicando fallo ---
EmpleadoFallback -> Publisher : publish("servicio-empleado.fallback.create", empleadoDto)
activate Publisher
Publisher --> EmpleadoFallback : ack

'--- 7) El fallback notifica error al StateMachine ---
EmpleadoFallback -> SM : sendEvent(Mono.just(ERROR))
deactivate EmpleadoFallback
deactivate Publisher

'--- 8) StateMachine recibe ERROR y transita a FALLIDO ---
SM -> SM : transición a estado FALLIDO\n(onErrorAction)

deactivate EmpleadoActions
deactivate SM

'--- 9) Controller devuelve error al cliente ---
Controller --> Gateway : HTTP 500 Internal Server Error
Gateway --> Cliente   : {error: "Circuit breaker abierto"}


@enduml
